#labels Featured
<wiki:toc max_depth="3" />
= Introduction =
This project provies a fully compliant BPEL4WS 1.1 and WS-BPEL 2.0 engine. 
The code here is based on the final release of ActiveBPEL 5.0.2. The goal of 
bpel-g is to provide a viable BPEL engine for the open source community, particularly
those in the public sector. The main focus is spec compliance.

= Building =

== Maven ==
bpel-g uses maven. You should be using maven 2.0.9 or later.

=== Local Repo ===
A couple of the projects require artifacts which aren't available on public repositories. A local maven repository is included as part of the trunk and is referenced by a some of the projects. If you're using a local proxy to mirror remote maven repositories, make sure that you have the mirrorOf rule configured to allow local reops (i.e. {{{ <mirrorOf>external:*</mirrorOf>}}} )

== Eclipse ==
Here are the steps for using eclipse:
* Install the [http://m2eclipse.sonatype.org/ m2eclipse plugin]
* File / Import / Existing Maven Projects
* Browse to the bpel-g root folder
* Select all of the leaf projects*
* Click import

Note: The m2eclipse plugin can be a little flaky when importing nested projects so I typically deselect the root project and then manually select each of the child projects. This way there won't be a duplicate copy of files in search results and your workspace will be smaller.

=== Mylyn ===
If you're a mylyn user, then you can connect to the issues list in google code by following the instructions [http://eclipse.dzone.com/articles/using-mylyn-with-google-code-u here]. I'm using the following config:

||server url|| {{{http://code.google.com/p/bpel-g/issues}}} ||
||query url|| {{{${serverUrl}/csv?can=2&colspec=ID%20Status%20Type%20Owner%20Summary&status=Accepted,Started&sort=priority}}} ||
|| query pattern || {{{ "({Id}[0-9]+?)","({Status}.+?)","({Type}.+?)","({Owner}.+?)","({Description}.+?)"\s}}} ||

= Database =
The ddl project in bpel-g contains scripts for Oracle, DB2, MySQL, SQL Server and H2. The server will create an embedded H2 database if none is configured at startup. This is the easiest way to get started and provides decent performance. 

== Configuring WAR ==
The WAR project has a context that is already configured to reference the database created during the build. Be sure to put the H2 jar within the $CATALINA_HOME/lib directory.

== Configuring ServiceMix ==
See the [ServiceMix] page

= Deployments =

== WAR ==
The Business Process Archive (or BPR) is the only supported packaging structure at the moment for the web application. Check the [http://activevos.com ActiveVOS] web site for information on how to construct a BPR or simply use their BPEL designer to create one. Support for a simpler packaging structure will be added in the future.

It is also possible to deploy a BPR via a web service call.

== Service Mix ==
See the [ServiceMix] page

== Validation ==
The default behavior during deployment is to validate the bpel, deployment artifacts, and WSDL. It is possible to disable this validation (although not recommended) by including a file named "skip.validation" inside the BPR or service unit. If present, none of the resources within the deployment unit will be validated. This was added to address a situation where deployment speed was essential and the bpel and associated artifacts were all known to be valid. 