#labels Featured
== Introduction ==
This project provies a fully compliant BPEL4WS 1.1 and WS-BPEL 2.0 engine. 
The code here is based on the final release of ActiveBPEL 5.0.2. The goal of 
bpel-g is to provide a viable BPEL engine for the open source community, particularly
those in the public sector. The main focus is spec compliance.

== Building ==

=== Local Repo ===
bpel-g uses maven. A couple of the projects require artifacts which aren't available on public repositories. A local maven repository is included as part of the trunk and is referenced by a some of the projects. If you're using a local proxy to mirror remote maven repositories, make sure that you have the mirrorOf rule configured to allow local reops (i.e. {{{ <mirrorOf>external:*</mirrorOf>}}} )

=== Eclipse ===
The easiest way to get these projects into eclipse is to install the [http://m2eclipse.sonatype.org/ m2eclipse plugin]. Once installed, select File / Import / Existing Maven Projects. The m2eclipse plugin can be a little flakey when importing nested projects so I typically deselect the root project and then manually select each of the child projects. This way there won't be a duplicate copy of files in search results and your workspace will be smaller.

=== Mylyn ===
If you're a mylyn user, then you can connect to the issues list in google code by following the instructions [http://eclipse.dzone.com/articles/using-mylyn-with-google-code-u here]. I'm using the following config:

||server url|| {{{http://code.google.com/p/bpel-g/issues}}} ||
||query url|| {{{${serverUrl}/csv?can=2&colspec=ID%20Status%20Type%20Owner%20Summary&status=Accepted,Started&sort=priority}}} ||
|| query pattern || {{{ "({Id}[0-9]+?)","({Status}.+?)","({Type}.+?)","({Owner}.+?)","({Description}.+?)"\s}}} ||

== Database ==
The default configuration of bpel-g requires a database (a future release will have an in-memory only profile). The database of choice for this release is the [http://www.h2database.com/ H2 java database]. At the moment, the easiest way to create the required db instance is to run the build for the war packaging:

{{{
bpel-g/bpel-g.war> mvn clean install -Dcreate-db 
}}}

This will create a database in the user's home directory named bpelg-h2-db. You can configure the location and name of the db that gets created by modifying the filter.properties file in this project. 

=== Configuring WAR ===
The WAR project has a context that is already configured to reference the database created during the build. Be sure to put the H2 jar within the $CATALINA_HOME/lib directory.

=== Configuring ServiceMix ===
$SERVICEMIX_HOME/conf/jndi.xml needs to have an entry for the DataSource. The following xml snippet should be pasted within the util:map block:

{{{

  <util:map id="jndiEntries">

    <!-- existing entries -->

    <entry key="java:comp/env/jdbc/ActiveBPELDB">
            <bean class="org.h2.jdbcx.JdbcDataSource">
                <property name="URL" value="jdbc:h2:~/bpelg-h2-db;MVCC=TRUE"/>
                <property name="user" value="sa"/>
                <property name="password" value="sa"/>
            </bean>
        </entry>
  </util:map>
}}}

Also need to put the H2 jar in $SERVICEMIX_HOME/lib

== BPEL Deployments in WAR ==
The Business Process Archive (or BPR) is the only supported packaging structure at the moment for the web application. Check the [http://activevos.com ActiveVOS] web site for information on how to construct a BPR or simply use their BPEL designer to create one. Support for a simpler packaging structure will be added in the future.

It is also possible to deploy a BPR via a web service call.

== BPEL Deployments in ServiceMix ==
The first step is to construct a service unit. Your service unit project should consist of your BPEL, WSDL, XSD, and XSL files. An additional deployment file named "deploy.xml" will need to be present. This file must contain one entry for each of the BPEL files you are deploying along with bindings for the myRole and partnerRole services. If a partnerRole service is left unbound then it is assumed to be a dynamically assigned endpoint reference and will not be initialized with any value. 

An example directory layout is below:

{{{
example-su
 |- src
 |   \- main
 |       \- resources
 |          |- example.bpel
 |          |- example.xsl
 |          |- deploy.xml
 |          \- wsdl
 |             |- example.wsdl
 |             |- other.wsdl
 |          \- xsd
 |             |- myschema.xsd
 |- pom.xml
}}}

What's going on:
  * maven will assemble the above structure into the proper format expected for the service unit (i.e. a zip) and include the necessary jbi.xml to identify the component that handles the deployment.
  * imports from the wsdl's to the xsd's MUST be relative. 
  * imports from the bpel's to the wsdl's or xsd's SHOULD be relative
  * upon deployment, a catalog is constructed with all of the wsdl, xsd, and xsl's in the service unit. These files form the context for the bpel's execution.
  * references to xsl files via bpel:doXSLTransform() need to be prefixed with "project:/" + $ServiceUnitName. In the example above, a reference to example.xsl would be done as follows: bpel:doXSLTransform( 'project:/example-su/example.xsl', ...)